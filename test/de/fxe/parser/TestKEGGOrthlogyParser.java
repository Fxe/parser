package de.fxe.parser;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;

import org.junit.BeforeClass;
import org.junit.Test;

import de.fxe.parser.KEGG.KEGGOrthologyParser;
import de.fxe.parser.KEGG.ParseException;

public class TestKEGGOrthlogyParser {

	private static String[] testCases = {"M00001", "(K00844,K12407,K00845,K00886,K08074,K00918) (K01810,K06859,K13810,K15916) (K00850,K16370,K00918) (K01623,K01624,K11645,K16305,K16306) K01803 (K00134,K00150) K00927 (K01834,K15633,K15634,K15635) K01689 (K00873,K12406)",
		"M00002", "K01803 (K00134,K00150) K00927 (K01834,K15633,K15634,K15635) K01689 (K00873,K12406)",
		"M00003", "(K01596,K01610) K01689 K01834 K00927 K00134 K01803 (K01623,K01624,K01622) (K03841,K02446,K11532,K04041,K01622)",
		"M00009", "K01647 (K01681,K01682) (K00031,K00030) (K00164+K00658+K00382,K00174+K00175+K00177+K00176) (K01902+K01903,K01899+K01900) (K00239+K00240+K00241+K00242,K00244+K00245+K00246+K00247,K00234+K00235+K00236+K00237) (K01676,K01679,K01677+K01678) (K00026,K00025,K00024)",
		"M00011", "(K00164+K00658+K00382,K00174+K00175+K00177+K00176) (K01902+K01903,K01899+K01900) (K00239+K00240+K00241+K00242,K00244+K00245+K00246+K00247,K00234+K00235+K00236+K00237) (K01676,K01679,K01677+K01678) (K00026,K00025,K00024)",
		"M00015", "(K00931 K00147,K12657) K00286",
		"M00016", "(K00928,K12524,K12525,K12526) K00133 K01714 K00215 K00674 (K00821,K14267) K01439 K01778 (K01586,K12526)",
		"M00017", "(K00928,K12524,K12525,K12526) K00133 (K00003,K12524,K12525) K00651 K01739 K01760 (K00548,K00549)",
		"M00018", "(K00928,K12524,K12525,K12526) K00133 (K00003,K12524,K12525) (K00872,K02204,K02203) K01733",
		"M00019", "K01652+(K01653,K11258) K00053 K01687 K00826",
		"M00020", "K00058 K00831 K01079",
		"M00027", "K01580 (K13524,K07250,K00823,K16871) (K00135,K00139)",
		"M00030", "K01655 K17450 K01705 K05824 (K00825,K00838) (K00143,K14085) K00293 K00290",
		"M00032", "((K00290,K00291) (K00292,K00293),K14157) (K00143,K14085) K00825 K00164 K00658 K00252 (K01825,K01782,K07514,(K01692,K07515,K07511) K00022)",
		"M00033", "K00928 K00133 K00836 K06718 K06720",
		"M00046", "K00207 K01464 K01431",
		"M00051", "(K11540,(K11541 K01465),((K01954,K01955+K01956) (K00609+K00610,K00608) K01465)) (K00226,K00254) (K13421,K00762 K01591)",
		"M00055", "K01001 (K07432+K07441) K03842 K03843 K03844 K03845 K03846 K03847 K03846 K00729 K03848 K03849 K03850",
		"M00095", "K00626 K01641 K00021 K00869 (K00938,K13273) K01597 K01823",
		"M00096", "K01662 K00099 (K00991,K12506) K00919 (K01770,K12506) K03526 K03527 K01823",
		"M00101", "K01852 K05917 K00222 K07750 K07748 (K09827,K13373) K09828 K01824 K00227 K00213",
		"M00119", "K00826 K00606 K00077", // K01579 (K01918,K13799)", <--- CHECK THIS
		"M00140", "K00600 K01491 K01938",
		"M00165", "K00855 (K01601+K01602) K00927 (K05298,K00150,K00134) (K01623,K01624) (K03841,K02446,K11532,K04041) K00615 (K01623,K01624) (K01100,K11532) K00615 (K01807,K01808)",
		"M00166", "K00855 K01601+K01602 K00927 (K05298,K00150,K00134)",
		"M00173", "(K00169+K00170+K00171+K00172,K03737) ((K01007,K01006) K01595,K01959+K01960,K01958) K00024 (K01676,K01679,K01677+K01678) (K00239+K00240-K00241-K00242,K00244+K00245+K00246+K00247) (K01902+K01903) (K00174+K00175-K00177-K00176) K00031 (K01681,K01682) (K15230+K15231,K15232+K15233 K15234)",
		"M00357", "(K00925 (K00625,K13788),K01895) (K00193+K00197+K00194) (K00577+K00578+K00579+K00580+K00581-K00582-K00583+K00584) (K00399+K00401+K00402) (K03388+K03389+K03390)",
		"M00364", "K01823 (K00795,K13789,K13787)",
		"M00365", "K01823 K13787",
		"M00366", "K01823 K14066 K00787 K13789",
		"M00367", "K01823 K00787 K00804",
		"M00374", "(K00169+K00170+K00171+K00172,K03737) K01007 K01595 K00024 (K01676,K01679,K01677+K01678) (K00239+K00240-K00241-K00242,K00244+K00245+K00246+K00247) (K01902+K01903) K15038 K14465 (K14466,K14467) K14534 (K15016,K01715 (K01782,K01825,K07516)) K00626",
		"M00377", "K00198 (K05299,K15022) K01938 K01491 K00297 K15023 (K14138+K00197+K00194)",
		"M00432", "K01649 (K01702,K01703+K01704) K00052",
		"M00433", "(K01655,K10977) (K17450 K01705,K16792+K16793) (K05824,K10978)",
		"M00525", "K00928 K00133 K01714 K00215 K05822 K00841 K05823 K01778 K01586",
		"M00526", "(K00928,K12524,K12525,K12526) K00133 K01714 K00215 K03340 (K01586,K12526)",
		"M00527", "(K00928,K12524,K12525,K12526) K00133 K01714 K00215 K10206 K01778 (K01586,K12526)",
		"M00535", "K09011 K01703+K01704 K00052",
		"M00546", "(K00106,K00087+K13479+K13480,K13481+K13482,K11177+K11178+K13483) (K00365,K16838,K16839) (K13484,K07127 (K13485,K16838,K16840)) (K01466,K16842) K01477",
		"M00570", "K01754 K01652+(K01653,K11258) K00053 K01687 K00826",
		"M00608", "K10977 K16792+K16793 K10978",
		"M00091", "K00551,(K16369 K00550),K00570",
		};
	
	private static String[] correctAnswers = {"M00001", "[[K00844, K12407, K00845, K00886, K08074, K00918], [K01810, K06859, K13810, K15916], [K00850, K16370, K00918], [K01623, K01624, K11645, K16305, K16306], [K01803], [K00134, K00150], [K00927], [K01834, K15633, K15634, K15635], [K01689], [K00873, K12406]]",
		"M00002", "[[K01803], [K00134, K00150], [K00927], [K01834, K15633, K15634, K15635], [K01689], [K00873, K12406]]",
		"M00003", "[[K01596, K01610], [K01689], [K01834], [K00927], [K00134], [K01803], [K01623, K01624, K01622], [K03841, K02446, K11532, K04041, K01622]]",
		"M00009", "[[K01647], [K01681, K01682], [K00031, K00030], [K00164+K00658+K00382, K00174+K00175+K00177+K00176], [K01902+K01903, K01899+K01900], [K00239+K00240+K00241+K00242, K00244+K00245+K00246+K00247, K00234+K00235+K00236+K00237], [K01676, K01679, K01677+K01678], [K00026, K00025, K00024]]",
		"M00011", "[[K00164+K00658+K00382, K00174+K00175+K00177+K00176], [K01902+K01903, K01899+K01900], [K00239+K00240+K00241+K00242, K00244+K00245+K00246+K00247, K00234+K00235+K00236+K00237], [K01676, K01679, K01677+K01678], [K00026, K00025, K00024]]",
		"M00015", "[[K00931], [K00147, K12657], [K00286]]",
		"M00016", "[[K00928, K12524, K12525, K12526], [K00133], [K01714], [K00215], [K00674], [K00821, K14267], [K01439], [K01778], [K01586, K12526]]",
		"M00017", "[[K00928, K12524, K12525, K12526], [K00133], [K00003, K12524, K12525], [K00651], [K01739], [K01760], [K00548, K00549]]",
		"M00018", "[[K00928, K12524, K12525, K12526], [K00133], [K00003, K12524, K12525], [K00872, K02204, K02203], [K01733]]",
		"M00019", "[[K01652+K01653, K01652+K11258], [K00053], [K01687], [K00826]]",
		"M00020", "[[K00058], [K00831], [K01079]]",
		"M00027", "[[K01580], [K13524, K07250, K00823, K16871], [K00135, K00139]]",
		"M00030", "[[K01655], [K17450], [K01705], [K05824], [K00825, K00838], [K00143, K14085], [K00293], [K00290]]",
		"M00032", "[[K00290, K00291], [K00292, K00293, K14157], [K00143, K14085], [K00825], [K00164], [K00658], [K00252], [K01825, K01782, K07514, K01692, K07515, K07511], [K00022]]",
		"M00033", "[[K00928], [K00133], [K00836], [K06718], [K06720]]",
		"M00046", "[[K00207], [K01464], [K01431]]",
		"M00051", "[[K11540, K11541, K01954, K01955+K01956], [K11540, K11541, K00609+K00610, K00608], [K11540, K11541, K01465], [K11540, K01465, K01954, K01955+K01956], [K11540, K01465, K00609+K00610, K00608], [K11540, K01465, K01465], [K00226, K00254], [K13421, K00762], [K01591]]",
		"M00055", "[[K01001], [K07432+K07441], [K03842], [K03843], [K03844], [K03845], [K03846], [K03847], [K03846], [K00729], [K03848], [K03849], [K03850]]",
		"M00095", "[[K00626], [K01641], [K00021], [K00869], [K00938, K13273], [K01597], [K01823]]",
		"M00096", "[[K01662], [K00099], [K00991, K12506], [K00919], [K01770, K12506], [K03526], [K03527], [K01823]]",
		"M00101", "[[K01852], [K05917], [K00222], [K07750], [K07748], [K09827, K13373], [K09828], [K01824], [K00227], [K00213]]",
		"M00119", "[[K00826], [K00606], [K00077]]",
		"M00140", "[[K00600], [K01491], [K01938]]",
		"M00165", "[[K00855], [K01601+K01602], [K00927], [K05298, K00150, K00134], [K01623, K01624], [K03841, K02446, K11532, K04041], [K00615], [K01623, K01624], [K01100, K11532], [K00615], [K01807, K01808]]",
		"M00166", "[[K00855], [K01601+K01602], [K00927], [K05298, K00150, K00134]]",
		"M00173", "[[K00169+K00170+K00171+K00172, K03737], [K01007, K01006], [K01595, K01959+K01960, K01958], [K00024], [K01676, K01679, K01677+K01678], [K00239+K00240-K00241-K00242, K00244+K00245+K00246+K00247], [K01902+K01903], [K00174+K00175-K00177-K00176], [K00031], [K01681, K01682], [K15230+K15231, K15232+K15233], [K15234]]",
		"M00357", "[[K00925], [K00625, K13788, K01895], [K00193+K00197+K00194], [K00577+K00578+K00579+K00580+K00581-K00582-K00583+K00584], [K00399+K00401+K00402], [K03388+K03389+K03390]]",
		"M00364", "[[K01823], [K00795, K13789, K13787]]",
		"M00365", "[[K01823], [K13787]]",
		"M00366", "[[K01823], [K14066], [K00787], [K13789]]",
		"M00367", "[[K01823], [K00787], [K00804]]",
		"M00374", "[[K00169+K00170+K00171+K00172, K03737], [K01007], [K01595], [K00024], [K01676, K01679, K01677+K01678], [K00239+K00240-K00241-K00242, K00244+K00245+K00246+K00247], [K01902+K01903], [K15038], [K14465], [K14466, K14467], [K14534], [K15016, K01715], [K01782, K01825, K07516], [K00626]]",
		"M00377", "[[K00198], [K05299, K15022], [K01938], [K01491], [K00297], [K15023], [K14138+K00197+K00194]]",
		"M00432", "[[K01649], [K01702, K01703+K01704], [K00052]]",
		"M00433", "[[K01655, K10977], [K17450], [K01705, K16792+K16793], [K05824, K10978]]",
		"M00525", "[[K00928], [K00133], [K01714], [K00215], [K05822], [K00841], [K05823], [K01778], [K01586]]",
		"M00526", "[[K00928, K12524, K12525, K12526], [K00133], [K01714], [K00215], [K03340], [K01586, K12526]]",
		"M00527", "[[K00928, K12524, K12525, K12526], [K00133], [K01714], [K00215], [K10206], [K01778], [K01586, K12526]]",
		"M00535", "[[K09011], [K01703+K01704], [K00052]]",
		"M00546", "[[K00106, K00087+K13479+K13480, K13481+K13482, K11177+K11178+K13483], [K00365, K16838, K16839], [K13484, K07127], [K13485, K16838, K16840], [K01466, K16842], [K01477]]",
		"M00570", "[[K01754], [K01652+K01653, K01652+K11258], [K00053], [K01687], [K00826]]",
		"M00608", "[[K10977], [K16792+K16793], [K10978]]",
		"M00091", "[[K00551], [K16369], [K00550], [K00570]]",
	};
	
	private static String[] examples = {"A",
										"A B",
										"(A, B, C) D",
										"(A, B) (C, D)",
										"A+B",
										"(A)+B",
										"(A,B)+C",
										"(A,B)+(C,D)",
										"(A,B)+(C,D) (X,Y)+(Z,W)",
										"(A,B)+((Z,W),(X,Y))",
										"(A,B)+((Z,W)+C,(X,Y)+D)",
										"(A,B)+((Z,W)+C,(X,Y)+D)+M",
										"((A B), C)",
										"((A B), (C D))",
										"((A B)+Y, (C D)+Z)",
										"((A B)+Y, (C (O M G))+Z)+W",
										"((A B)+Y, (C (O M)-G)+Z)+W",
										"((A B C D,E,F,G),H)",
										"((A B,C D E,F O,M,G),H)",
										"((A B,(C D) E),H)",};
	
	private static String[] KEGGExamples = {"(K00844,K12407,K00845,K00886,K08074,K00918) (K01810,K06859,K13810,K15916) (K00850,K16370,K00918) (K01623,K01624,K11645,K16305,K16306) K01803 (K00134,K00150) K00927 (K01834,K15633,K15634,K15635) K01689 (K00873,K12406)", //M00001
											"(K02777,K02817)+K02818+K02819", // M00270
											"K01655 K01681 K01705 K05824 (K00825,K00838) (K00143,K14085) K00293 K00290", // M00030
											"(K01655,K02594,K10977) ((K01681 K01705),K16792+K16793) (K05824,K10978)", // M00433
											"(K00169+K00170+K00171+K00172,K03737) ((K01007,K01006)+K01595,K01959+K01960,K01958) K00024 (K01676,K01679,K01677+K01678) (K00239+K00240-K00241-K00242,K00244+K00245+K00246+K00247) (K01902+K01903) (K00174+K00175-K00177-K00176) K00031 (K01681,K01682) (K15230+K15231,K15232+K15233+K15234)", //M00173
											"(K00169+K00170+K00171+K00172,K03737) K01007 K01595 K00024 (K01676,K01679,K01677+K01678) (K00239+K00240-K00241-K00242,K00244+K00245+K00246+K00247) (K01902+K01903) K15038 K14465 (K14466,K14467) K14534 (K15016,K01715+(K01782,K01825,K07516)) K00626" //M00374
										   };
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		KEGGOrthologyParser.VERBOSE = false;
	}

	@Test
	public void testExamples() {
		for (int i = 0; i < examples.length; i++) {
			ByteArrayInputStream stream = new ByteArrayInputStream(examples[i].getBytes());
			KEGGOrthologyParser koParser = new KEGGOrthologyParser(stream);
			try {
				System.out.println("PARSE RESULT: " + koParser.parseDefinition());
				
				System.out.println(examples[i] + " Passed !");
			} catch (ParseException pEx) {
				System.err.println("PEX: " + pEx.getMessage());
				System.out.println(examples[i] + " Failed !");
			}
			
		}
		
		assertEquals(true, true);
	}
	
	@Test
	public void testKEGGA() {
		for (int i = 0; i < correctAnswers.length; i+=2) {
			System.out.println(testCases[i]);
			ByteArrayInputStream stream = new ByteArrayInputStream(testCases[i + 1].getBytes());
			KEGGOrthologyParser koParser = new KEGGOrthologyParser(stream);
			try {
				String actual = koParser.parseDefinition().toString();
				System.out.println("PARSE RESULT: " + actual);
				assertEquals(correctAnswers[i + 1], actual);
				System.out.println(testCases[i] + " Passed !");
			} catch (ParseException pEx) {
				System.err.println("PEX: " + pEx.getMessage());
				System.out.println(testCases[i] + " Failed !");
			}
		}
	}
	
	@Test
	public void testKEGGExamples() {
		for (int i = 0; i < KEGGExamples.length; i++) {
			ByteArrayInputStream stream = new ByteArrayInputStream(KEGGExamples[i].getBytes());
			KEGGOrthologyParser koParser = new KEGGOrthologyParser(stream);
			try {
				System.out.println("PARSE RESULT: " + koParser.parseDefinition());
				
				System.out.println(KEGGExamples[i] + " Passed !");
			} catch (ParseException pEx) {
				System.err.println("PEX: " + pEx.getMessage());
				System.out.println(KEGGExamples[i] + " Failed !");
			}
			
		}
		
		assertEquals(true, true);
	}

}
